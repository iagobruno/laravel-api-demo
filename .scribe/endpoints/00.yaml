name: Users
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_username}'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a user'
      description: 'Returns the user data.'
      authenticated: false
      custom: []
    headers: []
    urlParameters:
      user_username:
        name: user_username
        description: 'The username of the user.'
        required: true
        example: atque
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      user_username: atque
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "id": 4,
             "name": "Jessica Jones",
             "username": "jessica_jones",
             "email": "jessica@gmail.com",
             "viewer_follows": true,
             "followers_count": 10,
             "following_count": 100,
             "tweets_url": "..."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/users/{user_username}/tweets'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Get a user's tweets"
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
    urlParameters:
      user_username:
        name: user_username
        description: 'The username of the user.'
        required: true
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      user_username: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      page:
        name: page
        description: 'The page number of the results to fetch.'
        required: false
        example: 13
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      limit:
        name: limit
        description: 'The number of results per page to be returned. Max 50 and the default is 10.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      page: 13
      limit: 17
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              { ... },
              { ... },
            ],
            "meta": {
              "current_page": 1,
              "total": 100,
              "per_page": 10,
              ...
            },
            "links": {...},
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/me
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the logged in user'
      description: "Returns the currently logged-in user's data."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
             "id": 4,
             "name": "Jessica Jones",
             "username": "jessica_jones",
             "email": "jessica@gmail.com",
             "viewer_follows": true,
             "followers_count": 10,
             "following_count": 100,
             "tweets_url": "..."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eDv68caVd34EgfhP6ba5Zk1'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: api/me
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user data'
      description: "Updates the currently logged-in user's data."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: false
        example: quitzon.elinore@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      username:
        name: username
        description: 'Must contain only letters, numbers, dashes and underscores. Must be at least 4 characters. Must not be greater than 20 characters.'
        required: false
        example: hsj
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      name:
        name: name
        description: 'Must be at least 1 character. Must not be greater than 50 characters.'
        required: false
        example: lbyvetb
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      email: quitzon.elinore@example.com
      username: hsj
      name: lbyvetb
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer h8kDedvP4fc6a3agVZ1E56b'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/me
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete user account'
      description: 'Delete the currently logged-in user account.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gdaEv816a4e53Z6PhfVkbDc'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{user_username}/follow'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Follow another user'
      description: 'Makes the logged in user follow another user.'
      authenticated: false
      custom: []
    headers: []
    urlParameters:
      user_username:
        name: user_username
        description: 'The username of the user to follow.'
        required: false
        example: non
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      user_username: non
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/users/{user_username}/unfollow'
    metadata:
      groupName: Users
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Unfollow a user'
      description: 'Makes the logged in user unfollow a user.'
      authenticated: false
      custom: []
    headers: []
    urlParameters:
      user_username:
        name: user_username
        description: 'The username of the user to unfollow.'
        required: false
        example: tenetur
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      user_username: tenetur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
